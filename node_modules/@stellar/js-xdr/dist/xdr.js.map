{"version":3,"file":"xdr.js","mappings":"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","sources":["webpack://XDR/webpack/universalModuleDefinition","webpack://XDR/./buffer.js","webpack://XDR/./src/browser.js","webpack://XDR/./src/errors.js","webpack://XDR/./src/serialization/xdr-reader.js","webpack://XDR/./src/serialization/xdr-writer.js","webpack://XDR/./src/xdr-type.js","webpack://XDR/./src/int.js","webpack://XDR/./src/bigint-encoder.js","webpack://XDR/./src/large-int.js","webpack://XDR/./src/hyper.js","webpack://XDR/./src/unsigned-int.js","webpack://XDR/./src/unsigned-hyper.js","webpack://XDR/./src/float.js","webpack://XDR/./src/double.js","webpack://XDR/./src/quadruple.js","webpack://XDR/./src/bool.js","webpack://XDR/./src/string.js","webpack://XDR/./src/opaque.js","webpack://XDR/./src/var-opaque.js","webpack://XDR/./src/array.js","webpack://XDR/./src/var-array.js","webpack://XDR/./src/option.js","webpack://XDR/./src/void.js","webpack://XDR/./src/enum.js","webpack://XDR/./src/reference.js","webpack://XDR/./src/struct.js","webpack://XDR/./src/union.js","webpack://XDR/./src/config.js","webpack://XDR/./node_modules/base64-js/index.js","webpack://XDR/./node_modules/buffer/index.js","webpack://XDR/./node_modules/ieee754/index.js","webpack://XDR/webpack/bootstrap","webpack://XDR/webpack/runtime/define property getters","webpack://XDR/webpack/runtime/global","webpack://XDR/webpack/runtime/hasOwnProperty shorthand","webpack://XDR/webpack/runtime/make namespace object","webpack://XDR/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"XDR\"] = factory();\n\telse\n\t\troot[\"XDR\"] = factory();\n})(this, () => {\nreturn ","// See https://github.com/stellar/js-xdr/issues/117\nimport { Buffer } from 'buffer';\n\nif (!(Buffer.alloc(1).subarray(0, 1) instanceof Buffer)) {\n  Buffer.prototype.subarray = function subarray(start, end) {\n    const result = Uint8Array.prototype.subarray.call(this, start, end);\n    Object.setPrototypeOf(result, Buffer.prototype);\n    return result;\n  };\n}\n\nexport default Buffer;\n","// eslint-disable-next-line prefer-import/prefer-import-over-require\nconst exports = require('./index');\nmodule.exports = exports;\n","export class XdrWriterError extends TypeError {\n  constructor(message) {\n    super(`XDR Write Error: ${message}`);\n  }\n}\n\nexport class XdrReaderError extends TypeError {\n  constructor(message) {\n    super(`XDR Read Error: ${message}`);\n  }\n}\n\nexport class XdrDefinitionError extends TypeError {\n  constructor(message) {\n    super(`XDR Type Definition Error: ${message}`);\n  }\n}\n\nexport class XdrNotImplementedDefinitionError extends XdrDefinitionError {\n  constructor() {\n    super(\n      `method not implemented, it should be overloaded in the descendant class.`\n    );\n  }\n}\n","/**\n * @internal\n */\nimport { XdrReaderError } from '../errors';\n\nexport class XdrReader {\n  /**\n   * @constructor\n   * @param {Buffer} source - Buffer containing serialized data\n   */\n  constructor(source) {\n    if (!Buffer.isBuffer(source)) {\n      if (\n        source instanceof Array ||\n        Array.isArray(source) ||\n        ArrayBuffer.isView(source)\n      ) {\n        source = Buffer.from(source);\n      } else {\n        throw new XdrReaderError(`source invalid: ${source}`);\n      }\n    }\n\n    this._buffer = source;\n    this._length = source.length;\n    this._index = 0;\n  }\n\n  /**\n   * @type {Buffer}\n   * @private\n   * @readonly\n   */\n  _buffer;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _length;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _index;\n\n  /**\n   * Check if the reader reached the end of the input buffer\n   * @return {Boolean}\n   */\n  get eof() {\n    return this._index === this._length;\n  }\n\n  /**\n   * Advance reader position, check padding and overflow\n   * @param {Number} size - Bytes to read\n   * @return {Number} Position to read from\n   * @private\n   */\n  advance(size) {\n    const from = this._index;\n    // advance cursor position\n    this._index += size;\n    // check buffer boundaries\n    if (this._length < this._index)\n      throw new XdrReaderError(\n        'attempt to read outside the boundary of the buffer'\n      );\n    // check that padding is correct for Opaque and String\n    const padding = 4 - (size % 4 || 4);\n    if (padding > 0) {\n      for (let i = 0; i < padding; i++)\n        if (this._buffer[this._index + i] !== 0)\n          // all bytes in the padding should be zeros\n          throw new XdrReaderError('invalid padding');\n      this._index += padding;\n    }\n    return from;\n  }\n\n  /**\n   * Reset reader position\n   * @return {void}\n   */\n  rewind() {\n    this._index = 0;\n  }\n\n  /**\n   * Read byte array from the buffer\n   * @param {Number} size - Bytes to read\n   * @return {Buffer} - Sliced portion of the underlying buffer\n   */\n  read(size) {\n    const from = this.advance(size);\n    return this._buffer.subarray(from, from + size);\n  }\n\n  /**\n   * Read i32 from buffer\n   * @return {Number}\n   */\n  readInt32BE() {\n    return this._buffer.readInt32BE(this.advance(4));\n  }\n\n  /**\n   * Read u32 from buffer\n   * @return {Number}\n   */\n  readUInt32BE() {\n    return this._buffer.readUInt32BE(this.advance(4));\n  }\n\n  /**\n   * Read i64 from buffer\n   * @return {BigInt}\n   */\n  readBigInt64BE() {\n    return this._buffer.readBigInt64BE(this.advance(8));\n  }\n\n  /**\n   * Read u64 from buffer\n   * @return {BigInt}\n   */\n  readBigUInt64BE() {\n    return this._buffer.readBigUInt64BE(this.advance(8));\n  }\n\n  /**\n   * Read float from buffer\n   * @return {Number}\n   */\n  readFloatBE() {\n    return this._buffer.readFloatBE(this.advance(4));\n  }\n\n  /**\n   * Read double from buffer\n   * @return {Number}\n   */\n  readDoubleBE() {\n    return this._buffer.readDoubleBE(this.advance(8));\n  }\n\n  /**\n   * Ensure that input buffer has been consumed in full, otherwise it's a type mismatch\n   * @return {void}\n   * @throws {XdrReaderError}\n   */\n  ensureInputConsumed() {\n    if (this._index !== this._length)\n      throw new XdrReaderError(\n        `invalid XDR contract typecast - source buffer not entirely consumed`\n      );\n  }\n}\n","const BUFFER_CHUNK = 8192; // 8 KB chunk size increment\n\n/**\n * @internal\n */\nexport class XdrWriter {\n  /**\n   * @param {Buffer|Number} [buffer] - Optional destination buffer\n   */\n  constructor(buffer) {\n    if (typeof buffer === 'number') {\n      buffer = Buffer.allocUnsafe(buffer);\n    } else if (!(buffer instanceof Buffer)) {\n      buffer = Buffer.allocUnsafe(BUFFER_CHUNK);\n    }\n    this._buffer = buffer;\n    this._length = buffer.length;\n  }\n\n  /**\n   * @type {Buffer}\n   * @private\n   * @readonly\n   */\n  _buffer;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _length;\n  /**\n   * @type {Number}\n   * @private\n   * @readonly\n   */\n  _index = 0;\n\n  /**\n   * Advance writer position, write padding if needed, auto-resize the buffer\n   * @param {Number} size - Bytes to write\n   * @return {Number} Position to read from\n   * @private\n   */\n  alloc(size) {\n    const from = this._index;\n    // advance cursor position\n    this._index += size;\n    // ensure sufficient buffer size\n    if (this._length < this._index) {\n      this.resize(this._index);\n    }\n    return from;\n  }\n\n  /**\n   * Increase size of the underlying buffer\n   * @param {Number} minRequiredSize - Minimum required buffer size\n   * @return {void}\n   * @private\n   */\n  resize(minRequiredSize) {\n    // calculate new length, align new buffer length by chunk size\n    const newLength = Math.ceil(minRequiredSize / BUFFER_CHUNK) * BUFFER_CHUNK;\n    // create new buffer and copy previous data\n    const newBuffer = Buffer.allocUnsafe(newLength);\n    this._buffer.copy(newBuffer, 0, 0, this._length);\n    // update references\n    this._buffer = newBuffer;\n    this._length = newLength;\n  }\n\n  /**\n   * Return XDR-serialized value\n   * @return {Buffer}\n   */\n  finalize() {\n    // clip underlying buffer to the actually written value\n    return this._buffer.subarray(0, this._index);\n  }\n\n  /**\n   * Return XDR-serialized value as byte array\n   * @return {Number[]}\n   */\n  toArray() {\n    return [...this.finalize()];\n  }\n\n  /**\n   * Write byte array from the buffer\n   * @param {Buffer|String} value - Bytes/string to write\n   * @param {Number} size - Size in bytes\n   * @return {XdrReader} - XdrReader wrapper on top of a subarray\n   */\n  write(value, size) {\n    if (typeof value === 'string') {\n      // serialize string directly to the output buffer\n      const offset = this.alloc(size);\n      this._buffer.write(value, offset, 'utf8');\n    } else {\n      // copy data to the output buffer\n      if (!(value instanceof Buffer)) {\n        value = Buffer.from(value);\n      }\n      const offset = this.alloc(size);\n      value.copy(this._buffer, offset, 0, size);\n    }\n\n    // add padding for 4-byte XDR alignment\n    const padding = 4 - (size % 4 || 4);\n    if (padding > 0) {\n      const offset = this.alloc(padding);\n      this._buffer.fill(0, offset, this._index);\n    }\n  }\n\n  /**\n   * Write i32 from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeInt32BE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeInt32BE(value, offset);\n  }\n\n  /**\n   * Write u32 from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeUInt32BE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeUInt32BE(value, offset);\n  }\n\n  /**\n   * Write i64 from buffer\n   * @param {BigInt} value - Value to serialize\n   * @return {void}\n   */\n  writeBigInt64BE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeBigInt64BE(value, offset);\n  }\n\n  /**\n   * Write u64 from buffer\n   * @param {BigInt} value - Value to serialize\n   * @return {void}\n   */\n  writeBigUInt64BE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeBigUInt64BE(value, offset);\n  }\n\n  /**\n   * Write float from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeFloatBE(value) {\n    const offset = this.alloc(4);\n    this._buffer.writeFloatBE(value, offset);\n  }\n\n  /**\n   * Write double from buffer\n   * @param {Number} value - Value to serialize\n   * @return {void}\n   */\n  writeDoubleBE(value) {\n    const offset = this.alloc(8);\n    this._buffer.writeDoubleBE(value, offset);\n  }\n\n  static bufferChunkSize = BUFFER_CHUNK;\n}\n","import { XdrReader } from './serialization/xdr-reader';\nimport { XdrWriter } from './serialization/xdr-writer';\nimport { XdrNotImplementedDefinitionError } from './errors';\n\nclass XdrType {\n  /**\n   * Encode value to XDR format\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {String|Buffer}\n   */\n  toXDR(format = 'raw') {\n    if (!this.write) return this.constructor.toXDR(this, format);\n\n    const writer = new XdrWriter();\n    this.write(this, writer);\n    return encodeResult(writer.finalize(), format);\n  }\n\n  /**\n   * Decode XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {this}\n   */\n  fromXDR(input, format = 'raw') {\n    if (!this.read) return this.constructor.fromXDR(input, format);\n\n    const reader = new XdrReader(decodeInput(input, format));\n    const result = this.read(reader);\n    reader.ensureInputConsumed();\n    return result;\n  }\n\n  /**\n   * Check whether input contains a valid XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Boolean}\n   */\n  validateXDR(input, format = 'raw') {\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Encode value to XDR format\n   * @param {this} value - Value to serialize\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Buffer}\n   */\n  static toXDR(value, format = 'raw') {\n    const writer = new XdrWriter();\n    this.write(value, writer);\n    return encodeResult(writer.finalize(), format);\n  }\n\n  /**\n   * Decode XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {this}\n   */\n  static fromXDR(input, format = 'raw') {\n    const reader = new XdrReader(decodeInput(input, format));\n    const result = this.read(reader);\n    reader.ensureInputConsumed();\n    return result;\n  }\n\n  /**\n   * Check whether input contains a valid XDR-encoded value\n   * @param {Buffer|String} input - XDR-encoded input data\n   * @param {XdrEncodingFormat} [format] - Encoding format (one of \"raw\", \"hex\", \"base64\")\n   * @return {Boolean}\n   */\n  static validateXDR(input, format = 'raw') {\n    try {\n      this.fromXDR(input, format);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n}\n\nexport class XdrPrimitiveType extends XdrType {\n  /**\n   * Read value from the XDR-serialized input\n   * @param {XdrReader} reader - XdrReader instance\n   * @return {this}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static read(reader) {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Write XDR value to the buffer\n   * @param {this} value - Value to write\n   * @param {XdrWriter} writer - XdrWriter instance\n   * @return {void}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static write(value, writer) {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Check whether XDR primitive value is valid\n   * @param {this} value - Value to check\n   * @return {Boolean}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  static isValid(value) {\n    return false;\n  }\n}\n\nexport class XdrCompositeType extends XdrType {\n  // Every descendant should implement two methods: read(reader) and write(value, writer)\n\n  /**\n   * Check whether XDR primitive value is valid\n   * @param {this} value - Value to check\n   * @return {Boolean}\n   * @abstract\n   */\n  // eslint-disable-next-line no-unused-vars\n  isValid(value) {\n    return false;\n  }\n}\n\nclass InvalidXdrEncodingFormatError extends TypeError {\n  constructor(format) {\n    super(`Invalid format ${format}, must be one of \"raw\", \"hex\", \"base64\"`);\n  }\n}\n\nfunction encodeResult(buffer, format) {\n  switch (format) {\n    case 'raw':\n      return buffer;\n    case 'hex':\n      return buffer.toString('hex');\n    case 'base64':\n      return buffer.toString('base64');\n    default:\n      throw new InvalidXdrEncodingFormatError(format);\n  }\n}\n\nfunction decodeInput(input, format) {\n  switch (format) {\n    case 'raw':\n      return input;\n    case 'hex':\n      return Buffer.from(input, 'hex');\n    case 'base64':\n      return Buffer.from(input, 'base64');\n    default:\n      throw new InvalidXdrEncodingFormatError(format);\n  }\n}\n\n/**\n * @typedef {'raw'|'hex'|'base64'} XdrEncodingFormat\n */\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nconst MAX_VALUE = 2147483647;\nconst MIN_VALUE = -2147483648;\n\nexport class Int extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readInt32BE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number') throw new XdrWriterError('not a number');\n\n    if ((value | 0) !== value) throw new XdrWriterError('invalid i32 value');\n\n    writer.writeInt32BE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    if (typeof value !== 'number' || (value | 0) !== value) {\n      return false;\n    }\n\n    return value >= MIN_VALUE && value <= MAX_VALUE;\n  }\n}\n\nInt.MAX_VALUE = MAX_VALUE;\nInt.MIN_VALUE = -MIN_VALUE;\n","/**\n * Encode a native `bigint` value from a list of arbitrary integer-like values.\n *\n * @param {Array<number|bigint|string>} parts - Slices to encode in big-endian\n *    format (i.e. earlier elements are higher bits)\n * @param {64|128|256} size - Number of bits in the target integer type\n * @param {boolean} unsigned - Whether it's an unsigned integer\n *\n * @returns {bigint}\n */\nexport function encodeBigIntFromBits(parts, size, unsigned) {\n  if (!(parts instanceof Array)) {\n    // allow a single parameter instead of an array\n    parts = [parts];\n  } else if (parts.length && parts[0] instanceof Array) {\n    // unpack nested array param\n    parts = parts[0];\n  }\n\n  const total = parts.length;\n  const sliceSize = size / total;\n  switch (sliceSize) {\n    case 32:\n    case 64:\n    case 128:\n    case 256:\n      break;\n\n    default:\n      throw new RangeError(\n        `expected slices to fit in 32/64/128/256 bits, got ${parts}`\n      );\n  }\n\n  // normalize all inputs to bigint\n  try {\n    for (let i = 0; i < parts.length; i++) {\n      if (typeof parts[i] !== 'bigint') {\n        parts[i] = BigInt(parts[i].valueOf());\n      }\n    }\n  } catch (e) {\n    throw new TypeError(`expected bigint-like values, got: ${parts} (${e})`);\n  }\n\n  // check for sign mismatches for single inputs (this is a special case to\n  // handle one parameter passed to e.g. UnsignedHyper et al.)\n  // see https://github.com/stellar/js-xdr/pull/100#discussion_r1228770845\n  if (unsigned && parts.length === 1 && parts[0] < 0n) {\n    throw new RangeError(`expected a positive value, got: ${parts}`);\n  }\n\n  // encode in big-endian fashion, shifting each slice by the slice size\n  let result = BigInt.asUintN(sliceSize, parts[0]); // safe: len >= 1\n  for (let i = 1; i < parts.length; i++) {\n    result |= BigInt.asUintN(sliceSize, parts[i]) << BigInt(i * sliceSize);\n  }\n\n  // interpret value as signed if necessary and clamp it\n  if (!unsigned) {\n    result = BigInt.asIntN(size, result);\n  }\n\n  // check boundaries\n  const [min, max] = calculateBigIntBoundaries(size, unsigned);\n  if (result >= min && result <= max) {\n    return result;\n  }\n\n  // failed to encode\n  throw new TypeError(\n    `bigint values [${parts}] for ${formatIntName(\n      size,\n      unsigned\n    )} out of range [${min}, ${max}]: ${result}`\n  );\n}\n\n/**\n * Transforms a single bigint value that's supposed to represent a `size`-bit\n * integer into a list of `sliceSize`d chunks.\n *\n * @param {bigint} value - Single bigint value to decompose\n * @param {64|128|256} iSize - Number of bits represented by `value`\n * @param {32|64|128} sliceSize - Number of chunks to decompose into\n * @return {bigint[]}\n */\nexport function sliceBigInt(value, iSize, sliceSize) {\n  if (typeof value !== 'bigint') {\n    throw new TypeError(`Expected bigint 'value', got ${typeof value}`);\n  }\n\n  const total = iSize / sliceSize;\n  if (total === 1) {\n    return [value];\n  }\n\n  if (\n    sliceSize < 32 ||\n    sliceSize > 128 ||\n    (total !== 2 && total !== 4 && total !== 8)\n  ) {\n    throw new TypeError(\n      `invalid bigint (${value}) and slice size (${iSize} -> ${sliceSize}) combination`\n    );\n  }\n\n  const shift = BigInt(sliceSize);\n\n  // iterate shift and mask application\n  const result = new Array(total);\n  for (let i = 0; i < total; i++) {\n    // we force a signed interpretation to preserve sign in each slice value,\n    // but downstream can convert to unsigned if it's appropriate\n    result[i] = BigInt.asIntN(sliceSize, value); // clamps to size\n\n    // move on to the next chunk\n    value >>= shift;\n  }\n\n  return result;\n}\n\nexport function formatIntName(precision, unsigned) {\n  return `${unsigned ? 'u' : 'i'}${precision}`;\n}\n\n/**\n * Get min|max boundaries for an integer with a specified bits size\n * @param {64|128|256} size - Number of bits in the source integer type\n * @param {Boolean} unsigned - Whether it's an unsigned integer\n * @return {BigInt[]}\n */\nexport function calculateBigIntBoundaries(size, unsigned) {\n  if (unsigned) {\n    return [0n, (1n << BigInt(size)) - 1n];\n  }\n\n  const boundary = 1n << BigInt(size - 1);\n  return [0n - boundary, boundary - 1n];\n}\n","import { XdrPrimitiveType } from './xdr-type';\nimport {\n  calculateBigIntBoundaries,\n  encodeBigIntFromBits,\n  sliceBigInt\n} from './bigint-encoder';\nimport { XdrNotImplementedDefinitionError, XdrWriterError } from './errors';\n\nexport class LargeInt extends XdrPrimitiveType {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(args) {\n    super();\n    this._value = encodeBigIntFromBits(args, this.size, this.unsigned);\n  }\n\n  /**\n   * Signed/unsigned representation\n   * @type {Boolean}\n   * @abstract\n   */\n  get unsigned() {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Size of the integer in bits\n   * @type {Number}\n   * @abstract\n   */\n  get size() {\n    throw new XdrNotImplementedDefinitionError();\n  }\n\n  /**\n   * Slice integer to parts with smaller bit size\n   * @param {32|64|128} sliceSize - Size of each part in bits\n   * @return {BigInt[]}\n   */\n  slice(sliceSize) {\n    return sliceBigInt(this._value, this.size, sliceSize);\n  }\n\n  toString() {\n    return this._value.toString();\n  }\n\n  toJSON() {\n    return { _value: this._value.toString() };\n  }\n\n  toBigInt() {\n    return BigInt(this._value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const { size } = this.prototype;\n    if (size === 64) return new this(reader.readBigUInt64BE());\n    return new this(\n      ...Array.from({ length: size / 64 }, () =>\n        reader.readBigUInt64BE()\n      ).reverse()\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (value instanceof this) {\n      value = value._value;\n    } else if (\n      typeof value !== 'bigint' ||\n      value > this.MAX_VALUE ||\n      value < this.MIN_VALUE\n    )\n      throw new XdrWriterError(`${value} is not a ${this.name}`);\n\n    const { unsigned, size } = this.prototype;\n    if (size === 64) {\n      if (unsigned) {\n        writer.writeBigUInt64BE(value);\n      } else {\n        writer.writeBigInt64BE(value);\n      }\n    } else {\n      for (const part of sliceBigInt(value, size, 64).reverse()) {\n        if (unsigned) {\n          writer.writeBigUInt64BE(part);\n        } else {\n          writer.writeBigInt64BE(part);\n        }\n      }\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'bigint' || value instanceof this;\n  }\n\n  /**\n   * Create instance from string\n   * @param {String} string - Numeric representation\n   * @return {LargeInt}\n   */\n  static fromString(string) {\n    return new this(string);\n  }\n\n  static MAX_VALUE = 0n;\n\n  static MIN_VALUE = 0n;\n\n  /**\n   * @internal\n   * @return {void}\n   */\n  static defineIntBoundaries() {\n    const [min, max] = calculateBigIntBoundaries(\n      this.prototype.size,\n      this.prototype.unsigned\n    );\n    this.MIN_VALUE = min;\n    this.MAX_VALUE = max;\n  }\n}\n","import { LargeInt } from './large-int';\n\nexport class Hyper extends LargeInt {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(...args) {\n    super(args);\n  }\n\n  get low() {\n    return Number(this._value & 0xffffffffn) << 0;\n  }\n\n  get high() {\n    return Number(this._value >> 32n) >> 0;\n  }\n\n  get size() {\n    return 64;\n  }\n\n  get unsigned() {\n    return false;\n  }\n\n  /**\n   * Create Hyper instance from two [high][low] i32 values\n   * @param {Number} low - Low part of i64 number\n   * @param {Number} high - High part of i64 number\n   * @return {LargeInt}\n   */\n  static fromBits(low, high) {\n    return new this(low, high);\n  }\n}\n\nHyper.defineIntBoundaries();\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nconst MAX_VALUE = 4294967295;\nconst MIN_VALUE = 0;\n\nexport class UnsignedInt extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readUInt32BE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (\n      typeof value !== 'number' ||\n      !(value >= MIN_VALUE && value <= MAX_VALUE) ||\n      value % 1 !== 0\n    )\n      throw new XdrWriterError('invalid u32 value');\n\n    writer.writeUInt32BE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    if (typeof value !== 'number' || value % 1 !== 0) {\n      return false;\n    }\n\n    return value >= MIN_VALUE && value <= MAX_VALUE;\n  }\n}\n\nUnsignedInt.MAX_VALUE = MAX_VALUE;\nUnsignedInt.MIN_VALUE = MIN_VALUE;\n","import { LargeInt } from './large-int';\n\nexport class UnsignedHyper extends LargeInt {\n  /**\n   * @param {Array<Number|BigInt|String>} parts - Slices to encode\n   */\n  constructor(...args) {\n    super(args);\n  }\n\n  get low() {\n    return Number(this._value & 0xffffffffn) << 0;\n  }\n\n  get high() {\n    return Number(this._value >> 32n) >> 0;\n  }\n\n  get size() {\n    return 64;\n  }\n\n  get unsigned() {\n    return true;\n  }\n\n  /**\n   * Create UnsignedHyper instance from two [high][low] i32 values\n   * @param {Number} low - Low part of u64 number\n   * @param {Number} high - High part of u64 number\n   * @return {UnsignedHyper}\n   */\n  static fromBits(low, high) {\n    return new this(low, high);\n  }\n}\n\nUnsignedHyper.defineIntBoundaries();\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Float extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readFloatBE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number') throw new XdrWriterError('not a number');\n\n    writer.writeFloatBE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'number';\n  }\n}\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Double extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    return reader.readDoubleBE();\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (typeof value !== 'number') throw new XdrWriterError('not a number');\n\n    writer.writeDoubleBE(value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'number';\n  }\n}\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrDefinitionError } from './errors';\n\nexport class Quadruple extends XdrPrimitiveType {\n  static read() {\n    throw new XdrDefinitionError('quadruple not supported');\n  }\n\n  static write() {\n    throw new XdrDefinitionError('quadruple not supported');\n  }\n\n  static isValid() {\n    return false;\n  }\n}\n","import { Int } from './int';\nimport { XdrPrimitiveType } from './xdr-type';\nimport { XdrReaderError } from './errors';\n\nexport class Bool extends XdrPrimitiveType {\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const value = Int.read(reader);\n\n    switch (value) {\n      case 0:\n        return false;\n      case 1:\n        return true;\n      default:\n        throw new XdrReaderError(`got ${value} when trying to read a bool`);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    const intVal = value ? 1 : 0;\n    Int.write(intVal, writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return typeof value === 'boolean';\n  }\n}\n","import { UnsignedInt } from './unsigned-int';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class String extends XdrCompositeType {\n  constructor(maxLength = UnsignedInt.MAX_VALUE) {\n    super();\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const size = UnsignedInt.read(reader);\n    if (size > this._maxLength)\n      throw new XdrReaderError(\n        `saw ${size} length String, max allowed is ${this._maxLength}`\n      );\n\n    return reader.read(size);\n  }\n\n  readString(reader) {\n    return this.read(reader).toString('utf8');\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    // calculate string byte size before writing\n    const size =\n      typeof value === 'string'\n        ? Buffer.byteLength(value, 'utf8')\n        : value.length;\n    if (size > this._maxLength)\n      throw new XdrWriterError(\n        `got ${value.length} bytes, max allowed is ${this._maxLength}`\n      );\n    // write size info\n    UnsignedInt.write(size, writer);\n    writer.write(value, size);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (typeof value === 'string') {\n      return Buffer.byteLength(value, 'utf8') <= this._maxLength;\n    }\n    if (value instanceof Array || Buffer.isBuffer(value)) {\n      return value.length <= this._maxLength;\n    }\n    return false;\n  }\n}\n","import { XdrCompositeType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Opaque extends XdrCompositeType {\n  constructor(length) {\n    super();\n    this._length = length;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    return reader.read(this._length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const { length } = value;\n    if (length !== this._length)\n      throw new XdrWriterError(\n        `got ${value.length} bytes, expected ${this._length}`\n      );\n    writer.write(value, length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    return Buffer.isBuffer(value) && value.length === this._length;\n  }\n}\n","import { UnsignedInt } from './unsigned-int';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class VarOpaque extends XdrCompositeType {\n  constructor(maxLength = UnsignedInt.MAX_VALUE) {\n    super();\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const size = UnsignedInt.read(reader);\n    if (size > this._maxLength)\n      throw new XdrReaderError(\n        `saw ${size} length VarOpaque, max allowed is ${this._maxLength}`\n      );\n    return reader.read(size);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const { length } = value;\n    if (value.length > this._maxLength)\n      throw new XdrWriterError(\n        `got ${value.length} bytes, max allowed is ${this._maxLength}`\n      );\n    // write size info\n    UnsignedInt.write(length, writer);\n    writer.write(value, length);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    return Buffer.isBuffer(value) && value.length <= this._maxLength;\n  }\n}\n","import { XdrCompositeType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Array extends XdrCompositeType {\n  constructor(childType, length) {\n    super();\n    this._childType = childType;\n    this._length = length;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    // allocate array of specified length\n    const result = new global.Array(this._length);\n    // read values\n    for (let i = 0; i < this._length; i++) {\n      result[i] = this._childType.read(reader);\n    }\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    if (!(value instanceof global.Array))\n      throw new XdrWriterError(`value is not array`);\n\n    if (value.length !== this._length)\n      throw new XdrWriterError(\n        `got array of size ${value.length}, expected ${this._length}`\n      );\n\n    for (const child of value) {\n      this._childType.write(child, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (!(value instanceof global.Array) || value.length !== this._length) {\n      return false;\n    }\n\n    for (const child of value) {\n      if (!this._childType.isValid(child)) return false;\n    }\n    return true;\n  }\n}\n","import { UnsignedInt } from './unsigned-int';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class VarArray extends XdrCompositeType {\n  constructor(childType, maxLength = UnsignedInt.MAX_VALUE) {\n    super();\n    this._childType = childType;\n    this._maxLength = maxLength;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    const length = UnsignedInt.read(reader);\n    if (length > this._maxLength)\n      throw new XdrReaderError(\n        `saw ${length} length VarArray, max allowed is ${this._maxLength}`\n      );\n\n    const result = new Array(length);\n    for (let i = 0; i < length; i++) {\n      result[i] = this._childType.read(reader);\n    }\n    return result;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    if (!(value instanceof Array))\n      throw new XdrWriterError(`value is not array`);\n\n    if (value.length > this._maxLength)\n      throw new XdrWriterError(\n        `got array of size ${value.length}, max allowed is ${this._maxLength}`\n      );\n\n    UnsignedInt.write(value.length, writer);\n    for (const child of value) {\n      this._childType.write(child, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (!(value instanceof Array) || value.length > this._maxLength) {\n      return false;\n    }\n    for (const child of value) {\n      if (!this._childType.isValid(child)) return false;\n    }\n    return true;\n  }\n}\n","import { Bool } from './bool';\nimport { XdrPrimitiveType } from './xdr-type';\n\nexport class Option extends XdrPrimitiveType {\n  constructor(childType) {\n    super();\n    this._childType = childType;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  read(reader) {\n    if (Bool.read(reader)) {\n      return this._childType.read(reader);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  write(value, writer) {\n    const isPresent = value !== null && value !== undefined;\n\n    Bool.write(isPresent, writer);\n\n    if (isPresent) {\n      this._childType.write(value, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  isValid(value) {\n    if (value === null || value === undefined) {\n      return true;\n    }\n    return this._childType.isValid(value);\n  }\n}\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Void extends XdrPrimitiveType {\n  /* jshint unused: false */\n\n  static read() {\n    return undefined;\n  }\n\n  static write(value) {\n    if (value !== undefined)\n      throw new XdrWriterError('trying to write value to a void slot');\n  }\n\n  static isValid(value) {\n    return value === undefined;\n  }\n}\n","import { Int } from './int';\nimport { XdrPrimitiveType } from './xdr-type';\nimport { XdrReaderError, XdrWriterError } from './errors';\n\nexport class Enum extends XdrPrimitiveType {\n  constructor(name, value) {\n    super();\n    this.name = name;\n    this.value = value;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const intVal = Int.read(reader);\n    const res = this._byValue[intVal];\n    if (res === undefined)\n      throw new XdrReaderError(\n        `unknown ${this.enumName} member for value ${intVal}`\n      );\n    return res;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!(value instanceof this))\n      throw new XdrWriterError(`unknown ${value} is not a ${this.enumName}`);\n\n    Int.write(value.value, writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return value instanceof this;\n  }\n\n  static members() {\n    return this._members;\n  }\n\n  static values() {\n    return Object.values(this._members);\n  }\n\n  static fromName(name) {\n    const result = this._members[name];\n\n    if (!result)\n      throw new TypeError(`${name} is not a member of ${this.enumName}`);\n\n    return result;\n  }\n\n  static fromValue(value) {\n    const result = this._byValue[value];\n    if (result === undefined)\n      throw new TypeError(\n        `${value} is not a value of any member of ${this.enumName}`\n      );\n    return result;\n  }\n\n  static create(context, name, members) {\n    const ChildEnum = class extends Enum {};\n\n    ChildEnum.enumName = name;\n    context.results[name] = ChildEnum;\n\n    ChildEnum._members = {};\n    ChildEnum._byValue = {};\n\n    for (const [key, value] of Object.entries(members)) {\n      const inst = new ChildEnum(key, value);\n      ChildEnum._members[key] = inst;\n      ChildEnum._byValue[value] = inst;\n      ChildEnum[key] = () => inst;\n    }\n\n    return ChildEnum;\n  }\n}\n","import { XdrPrimitiveType } from './xdr-type';\nimport { XdrDefinitionError } from './errors';\n\nexport class Reference extends XdrPrimitiveType {\n  /* jshint unused: false */\n  resolve() {\n    throw new XdrDefinitionError(\n      '\"resolve\" method should be implemented in the descendant class'\n    );\n  }\n}\n","import { Reference } from './reference';\nimport { XdrPrimitiveType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Struct extends XdrPrimitiveType {\n  constructor(attributes) {\n    super();\n    this._attributes = attributes || {};\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const attributes = {};\n    for (const [fieldName, type] of this._fields) {\n      attributes[fieldName] = type.read(reader);\n    }\n    return new this(attributes);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!(value instanceof this))\n      throw new XdrWriterError(`${value} is not a ${this.structName}`);\n\n    for (const [fieldName, type] of this._fields) {\n      const attribute = value._attributes[fieldName];\n      type.write(attribute, writer);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return value instanceof this;\n  }\n\n  static create(context, name, fields) {\n    const ChildStruct = class extends Struct {};\n\n    ChildStruct.structName = name;\n\n    context.results[name] = ChildStruct;\n\n    const mappedFields = new Array(fields.length);\n    for (let i = 0; i < fields.length; i++) {\n      const fieldDescriptor = fields[i];\n      const fieldName = fieldDescriptor[0];\n      let field = fieldDescriptor[1];\n      if (field instanceof Reference) {\n        field = field.resolve(context);\n      }\n      mappedFields[i] = [fieldName, field];\n      // create accessors\n      ChildStruct.prototype[fieldName] = createAccessorMethod(fieldName);\n    }\n\n    ChildStruct._fields = mappedFields;\n\n    return ChildStruct;\n  }\n}\n\nfunction createAccessorMethod(name) {\n  return function readOrWriteAttribute(value) {\n    if (value !== undefined) {\n      this._attributes[name] = value;\n    }\n    return this._attributes[name];\n  };\n}\n","import { Void } from './void';\nimport { Reference } from './reference';\nimport { XdrCompositeType } from './xdr-type';\nimport { XdrWriterError } from './errors';\n\nexport class Union extends XdrCompositeType {\n  constructor(aSwitch, value) {\n    super();\n    this.set(aSwitch, value);\n  }\n\n  set(aSwitch, value) {\n    if (typeof aSwitch === 'string') {\n      aSwitch = this.constructor._switchOn.fromName(aSwitch);\n    }\n\n    this._switch = aSwitch;\n    const arm = this.constructor.armForSwitch(this._switch);\n    this._arm = arm;\n    this._armType = arm === Void ? Void : this.constructor._arms[arm];\n    this._value = value;\n  }\n\n  get(armName = this._arm) {\n    if (this._arm !== Void && this._arm !== armName)\n      throw new TypeError(`${armName} not set`);\n    return this._value;\n  }\n\n  switch() {\n    return this._switch;\n  }\n\n  arm() {\n    return this._arm;\n  }\n\n  armType() {\n    return this._armType;\n  }\n\n  value() {\n    return this._value;\n  }\n\n  static armForSwitch(aSwitch) {\n    const member = this._switches.get(aSwitch);\n    if (member !== undefined) {\n      return member;\n    }\n    if (this._defaultArm) {\n      return this._defaultArm;\n    }\n    throw new TypeError(`Bad union switch: ${aSwitch}`);\n  }\n\n  static armTypeForArm(arm) {\n    if (arm === Void) {\n      return Void;\n    }\n    return this._arms[arm];\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static read(reader) {\n    const aSwitch = this._switchOn.read(reader);\n    const arm = this.armForSwitch(aSwitch);\n    const armType = arm === Void ? Void : this._arms[arm];\n    let value;\n    if (armType !== undefined) {\n      value = armType.read(reader);\n    } else {\n      value = arm.read(reader);\n    }\n    return new this(aSwitch, value);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static write(value, writer) {\n    if (!(value instanceof this))\n      throw new XdrWriterError(`${value} is not a ${this.unionName}`);\n\n    this._switchOn.write(value.switch(), writer);\n    value.armType().write(value.value(), writer);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  static isValid(value) {\n    return value instanceof this;\n  }\n\n  static create(context, name, config) {\n    const ChildUnion = class extends Union {};\n\n    ChildUnion.unionName = name;\n    context.results[name] = ChildUnion;\n\n    if (config.switchOn instanceof Reference) {\n      ChildUnion._switchOn = config.switchOn.resolve(context);\n    } else {\n      ChildUnion._switchOn = config.switchOn;\n    }\n\n    ChildUnion._switches = new Map();\n    ChildUnion._arms = {};\n\n    // resolve default arm\n    let defaultArm = config.defaultArm;\n    if (defaultArm instanceof Reference) {\n      defaultArm = defaultArm.resolve(context);\n    }\n\n    ChildUnion._defaultArm = defaultArm;\n\n    for (const [aSwitch, armName] of config.switches) {\n      const key =\n        typeof aSwitch === 'string'\n          ? ChildUnion._switchOn.fromName(aSwitch)\n          : aSwitch;\n\n      ChildUnion._switches.set(key, armName);\n    }\n\n    // add enum-based helpers\n    // NOTE: we don't have good notation for \"is a subclass of XDR.Enum\",\n    //  and so we use the following check (does _switchOn have a `values`\n    //  attribute) to approximate the intent.\n    if (ChildUnion._switchOn.values !== undefined) {\n      for (const aSwitch of ChildUnion._switchOn.values()) {\n        // Add enum-based constructors\n        ChildUnion[aSwitch.name] = function ctr(value) {\n          return new ChildUnion(aSwitch, value);\n        };\n\n        // Add enum-based \"set\" helpers\n        ChildUnion.prototype[aSwitch.name] = function set(value) {\n          return this.set(aSwitch, value);\n        };\n      }\n    }\n\n    if (config.arms) {\n      for (const [armsName, value] of Object.entries(config.arms)) {\n        ChildUnion._arms[armsName] =\n          value instanceof Reference ? value.resolve(context) : value;\n        // Add arm accessor helpers\n        if (value !== Void) {\n          ChildUnion.prototype[armsName] = function get() {\n            return this.get(armsName);\n          };\n        }\n      }\n    }\n\n    return ChildUnion;\n  }\n}\n","// eslint-disable-next-line max-classes-per-file\nimport * as XDRTypes from './types';\nimport { Reference } from './reference';\nimport { XdrDefinitionError } from './errors';\n\nexport * from './reference';\n\nclass SimpleReference extends Reference {\n  constructor(name) {\n    super();\n    this.name = name;\n  }\n\n  resolve(context) {\n    const defn = context.definitions[this.name];\n    return defn.resolve(context);\n  }\n}\n\nclass ArrayReference extends Reference {\n  constructor(childReference, length, variable = false) {\n    super();\n    this.childReference = childReference;\n    this.length = length;\n    this.variable = variable;\n  }\n\n  resolve(context) {\n    let resolvedChild = this.childReference;\n    let length = this.length;\n\n    if (resolvedChild instanceof Reference) {\n      resolvedChild = resolvedChild.resolve(context);\n    }\n\n    if (length instanceof Reference) {\n      length = length.resolve(context);\n    }\n\n    if (this.variable) {\n      return new XDRTypes.VarArray(resolvedChild, length);\n    }\n    return new XDRTypes.Array(resolvedChild, length);\n  }\n}\n\nclass OptionReference extends Reference {\n  constructor(childReference) {\n    super();\n    this.childReference = childReference;\n    this.name = childReference.name;\n  }\n\n  resolve(context) {\n    let resolvedChild = this.childReference;\n\n    if (resolvedChild instanceof Reference) {\n      resolvedChild = resolvedChild.resolve(context);\n    }\n\n    return new XDRTypes.Option(resolvedChild);\n  }\n}\n\nclass SizedReference extends Reference {\n  constructor(sizedType, length) {\n    super();\n    this.sizedType = sizedType;\n    this.length = length;\n  }\n\n  resolve(context) {\n    let length = this.length;\n\n    if (length instanceof Reference) {\n      length = length.resolve(context);\n    }\n\n    return new this.sizedType(length);\n  }\n}\n\nclass Definition {\n  constructor(constructor, name, cfg) {\n    this.constructor = constructor;\n    this.name = name;\n    this.config = cfg;\n  }\n\n  // resolve calls the constructor of this definition with the provided context\n  // and this definitions config values.  The definitions constructor should\n  // populate the final type on `context.results`, and may refer to other\n  // definitions through `context.definitions`\n  resolve(context) {\n    if (this.name in context.results) {\n      return context.results[this.name];\n    }\n\n    return this.constructor(context, this.name, this.config);\n  }\n}\n\n// let the reference resolution system do its thing\n// the \"constructor\" for a typedef just returns the resolved value\nfunction createTypedef(context, typeName, value) {\n  if (value instanceof Reference) {\n    value = value.resolve(context);\n  }\n  context.results[typeName] = value;\n  return value;\n}\n\nfunction createConst(context, name, value) {\n  context.results[name] = value;\n  return value;\n}\n\nclass TypeBuilder {\n  constructor(destination) {\n    this._destination = destination;\n    this._definitions = {};\n  }\n\n  enum(name, members) {\n    const result = new Definition(XDRTypes.Enum.create, name, members);\n    this.define(name, result);\n  }\n\n  struct(name, members) {\n    const result = new Definition(XDRTypes.Struct.create, name, members);\n    this.define(name, result);\n  }\n\n  union(name, cfg) {\n    const result = new Definition(XDRTypes.Union.create, name, cfg);\n    this.define(name, result);\n  }\n\n  typedef(name, cfg) {\n    const result = new Definition(createTypedef, name, cfg);\n    this.define(name, result);\n  }\n\n  const(name, cfg) {\n    const result = new Definition(createConst, name, cfg);\n    this.define(name, result);\n  }\n\n  void() {\n    return XDRTypes.Void;\n  }\n\n  bool() {\n    return XDRTypes.Bool;\n  }\n\n  int() {\n    return XDRTypes.Int;\n  }\n\n  hyper() {\n    return XDRTypes.Hyper;\n  }\n\n  uint() {\n    return XDRTypes.UnsignedInt;\n  }\n\n  uhyper() {\n    return XDRTypes.UnsignedHyper;\n  }\n\n  float() {\n    return XDRTypes.Float;\n  }\n\n  double() {\n    return XDRTypes.Double;\n  }\n\n  quadruple() {\n    return XDRTypes.Quadruple;\n  }\n\n  string(length) {\n    return new SizedReference(XDRTypes.String, length);\n  }\n\n  opaque(length) {\n    return new SizedReference(XDRTypes.Opaque, length);\n  }\n\n  varOpaque(length) {\n    return new SizedReference(XDRTypes.VarOpaque, length);\n  }\n\n  array(childType, length) {\n    return new ArrayReference(childType, length);\n  }\n\n  varArray(childType, maxLength) {\n    return new ArrayReference(childType, maxLength, true);\n  }\n\n  option(childType) {\n    return new OptionReference(childType);\n  }\n\n  define(name, definition) {\n    if (this._destination[name] === undefined) {\n      this._definitions[name] = definition;\n    } else {\n      throw new XdrDefinitionError(`${name} is already defined`);\n    }\n  }\n\n  lookup(name) {\n    return new SimpleReference(name);\n  }\n\n  resolve() {\n    for (const defn of Object.values(this._definitions)) {\n      defn.resolve({\n        definitions: this._definitions,\n        results: this._destination\n      });\n    }\n  }\n}\n\nexport function config(fn, types = {}) {\n  if (fn) {\n    const builder = new TypeBuilder(types);\n    fn(builder);\n    builder.resolve();\n  }\n\n  return types;\n}\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(281);\n"],"names":["root","factory","exports","module","define","amd","this","Buffer","alloc","subarray","prototype","start","end","result","Uint8Array","call","Object","setPrototypeOf","require","XdrWriterError","TypeError","constructor","message","super","XdrReaderError","XdrDefinitionError","XdrNotImplementedDefinitionError","XdrReader","source","isBuffer","Array","isArray","ArrayBuffer","isView","from","_buffer","_length","length","_index","eof","advance","size","padding","i","rewind","read","readInt32BE","readUInt32BE","readBigInt64BE","readBigUInt64BE","readFloatBE","readDoubleBE","ensureInputConsumed","BUFFER_CHUNK","XdrWriter","buffer","allocUnsafe","resize","minRequiredSize","newLength","Math","ceil","newBuffer","copy","finalize","toArray","write","value","offset","fill","writeInt32BE","writeUInt32BE","writeBigInt64BE","writeBigUInt64BE","writeFloatBE","writeDoubleBE","static","XdrType","toXDR","format","writer","encodeResult","fromXDR","input","reader","decodeInput","validateXDR","e","XdrPrimitiveType","isValid","XdrCompositeType","InvalidXdrEncodingFormatError","toString","MAX_VALUE","MIN_VALUE","Int","sliceBigInt","iSize","sliceSize","total","shift","BigInt","asIntN","calculateBigIntBoundaries","unsigned","boundary","LargeInt","args","_value","parts","RangeError","valueOf","asUintN","min","max","precision","formatIntName","encodeBigIntFromBits","slice","toJSON","toBigInt","reverse","name","part","fromString","string","defineIntBoundaries","Hyper","low","Number","high","fromBits","UnsignedInt","UnsignedHyper","Float","Double","Quadruple","Bool","intVal","String","maxLength","_maxLength","readString","byteLength","Opaque","VarOpaque","childType","_childType","global","child","VarArray","Option","isPresent","Void","undefined","Enum","res","_byValue","enumName","members","_members","values","fromName","fromValue","create","context","ChildEnum","results","key","entries","inst","Reference","resolve","Struct","attributes","_attributes","fieldName","type","_fields","structName","attribute","fields","ChildStruct","mappedFields","fieldDescriptor","field","createAccessorMethod","Union","aSwitch","set","_switchOn","_switch","arm","armForSwitch","_arm","_armType","_arms","get","armName","switch","armType","member","_switches","_defaultArm","armTypeForArm","unionName","config","ChildUnion","switchOn","Map","defaultArm","switches","arms","armsName","SimpleReference","definitions","ArrayReference","childReference","variable","resolvedChild","XDRTypes","OptionReference","SizedReference","sizedType","Definition","cfg","createTypedef","typeName","createConst","TypeBuilder","destination","_destination","_definitions","enum","struct","union","typedef","const","void","bool","int","hyper","uint","uhyper","float","double","quadruple","opaque","varOpaque","array","varArray","option","definition","lookup","defn","fn","types","builder","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","extraBytes","maxChunkLength","len2","push","encodeChunk","join","code","Error","indexOf","num","output","base64","ieee754","customInspectSymbol","Symbol","K_MAX_LENGTH","createBuffer","buf","arg","encodingOrOffset","encoding","isEncoding","actual","arrayView","isInstance","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","b","obj","checked","numberIsNaN","data","fromObject","toPrimitive","assertSize","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","n","m","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","j","hexWrite","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","base64Write","ucs2Write","units","c","hi","lo","utf16leToBytes","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","error","defineProperty","enumerable","poolSize","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","replace","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","ret","out","hexSliceLookupTable","bytes","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readBigInt64LE","readFloatLE","readDoubleLE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeBigUInt64LE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeBigInt64LE","writeFloatLE","writeDoubleLE","targetStart","copyWithin","errors","E","sym","getMessage","Base","writable","configurable","stack","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","floor","ERR_BUFFER_OUT_OF_BOUNDS","msg","received","isInteger","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","split","base64clean","src","dst","alphabet","table","i16","BufferBigIntNotDefined","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","isNaN","log","LN2","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","o","g","globalThis","Function","window","prop","hasOwnProperty","r","toStringTag"],"sourceRoot":""}